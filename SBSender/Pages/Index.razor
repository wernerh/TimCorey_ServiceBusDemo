@page "/"

@using SBShared.Models
@using SBSender.Services
@inject IQueueService queue

<h1>Hello, world!</h1>

Welcome to your new app.

<EditForm Model="@person" OnValidSubmit="@PublishMessage">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="firstName">First Name</label>
        <InputText id="firstName" class="form-control" @bind-Value="person.FirstName" />
    </div>

    <div class="form-group">
        <label for="lastName">Last Name</label>
        <InputText id="lastName" class="form-control" @bind-Value="person.LastName" />
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@code{
    private PersonModel person = new PersonModel();

    private async Task PublishMessage()
    {
        await queue.SendMessageAsync(person, "personqueue");
        person = new PersonModel();
    }

    private async Task Publish1000Message()
    {
        await PublishMessage();
        for (int i = 0; i < 999; i++)
        {
            person = new PersonModel { FirstName = GetFirstName(), LastName = GetLastName() };
            await queue.SendMessageAsync(person, "personqueue");
            person = new PersonModel();
        }

    }

    private string GetFirstName()
    {
        string[] FirstNames = { "Jess", "Jay", "Jen", "Jack", "Jan", "Issac", "Tom", "Tim", "Bob" };
        Random r = new Random();

        int index = r.Next(0, FirstNames.Length);
        return FirstNames[index];
    }


    private string GetLastName()
    {
        string[] LastNames = { "Birchfield", "Drown", "Galloway", "Phillips", "Klopfer", "Worthen", "Phillips" };
        Random r = new Random();

        int index = r.Next(0, LastNames.Length);
        return LastNames[index];
    }
}